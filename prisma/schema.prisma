generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?

  permissions PermissionsOnRoles[]
  users       RolesOnUsers[]

  @@map("roles")
}

model Permission {
  id      String @id @default(uuid())
  action  String
  subject String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  roles PermissionsOnRoles[]
  users PermissionsOnUsers[]

  @@map("permissions")
}

model PermissionsOnRoles {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  onlyOwn Boolean @default(false)

  assignedAt DateTime @default(now())

  @@id([roleId, permissionId])
  @@map("permissions_on_roles")
}

model PermissionsOnUsers {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  onlyOwn Boolean @default(false)

  assignedAt DateTime @default(now())

  @@id([userId, permissionId])
  @@map("permissions_on_users")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String

  roles       RolesOnUsers[]
  permissions PermissionsOnUsers[]

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?

  @@map("users")
}

model RolesOnUsers {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  assignedAt DateTime @default(now())

  @@id([userId, roleId])
  @@map("roles_on_users")
}

model Tenant {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?

  users   User[]
  domains Domain[]

  @@map("tenants")
}

model Domain {
  id      String  @id @default(uuid())
  url     String @unique
  secured Boolean @default(false)
  default Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?

  @@map("domains")
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  isPublished Boolean? @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
      @@map("course")

}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]

  @@map("categories")
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([courseId])
  @@map("attachments")
}


model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean? @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
    @@map("chapter")

}


//d√ºzenleme ! 